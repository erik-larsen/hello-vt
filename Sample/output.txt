INFO: SDL version: 2.30.11
INFO: GL version: OpenGL ES 3.0.0 (ANGLE 2.1.24256 git hash: ce13a00a2b04)
File exists: ./uv-test-8kx8k/\tiles_b0_level0\tile_0_0_0.png
File exists: ./uv-test-8kx8k/\tiles_b0_level1\tile_1_0_0.png
File exists: ./uv-test-8kx8k/\tiles_b0_level2\tile_2_0_0.png
File exists: ./uv-test-8kx8k/\tiles_b0_level3\tile_3_0_0.png
File exists: ./uv-test-8kx8k/\tiles_b0_level4\tile_4_0_0.png
File exists: ./uv-test-8kx8k/\tiles_b0_level5\tile_5_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level6\tile_6_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level7\tile_7_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level8\tile_8_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level9\tile_9_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level10\tile_10_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level11\tile_11_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level12\tile_12_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level13\tile_13_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level14\tile_14_0_0.png
File does not exist: ./uv-test-8kx8k/\tiles_b0_level15\tile_15_0_0.png
Caching page from Disk: Mip:5 0/0
Loading PNG file: ./uv-test-8kx8k/\tiles_b0_level5\tile_5_0_0.png
VT shader id: 1 source:
   
//
//  LibVT Virtual Texturing Shaders
//  Based on Sean Barrett's public domain "Sparse Virtual Textures" demo shaders
//  Copyright (c) 2010 A. Julian Mayer
//
   
    precision mediump float;

    const float phys_tex_dimension_pages = 32.000000;
    const float page_dimension = 256.000000;
    const float page_dimension_log2 = 8.000000;
    const float prepass_resolution_reduction_shift = 2.000000;
    const float virt_tex_dimension_pages = 32.000000;
    const float virt_tex_dimension = 8192.000000;
    const float border_width = 0.000000;
    const float max_anisotropy = 0.000000;

    #define USE_MIPCALC_TEXTURE 1
    #define PAGE_BORDER 0
    #define MIPPED_PHYSTEX 0
    #define FALLBACK_ENTRIES 1
    #define ANISOTROPY 0
    #define LONG_MIP_CHAIN 0
    #define TEXUNIT_MIPCALC TEXUNIT3
    #define TEXUNIT_PHYSICAL TEXUNIT2
    #define TEXUNIT_PAGETABLE TEXUNIT1

 
    //
    // vtReadbackVertGLSL
    //    
    uniform mat4 matViewProjection;
    attribute vec4 vertex;
    attribute vec2 texcoord0;
    varying vec2 texcoord;
    void main(void)
    {
        gl_Position = matViewProjection * vertex;
        texcoord    = texcoord0.xy;
    }

VT shader id: 2 source:
   
//
//  LibVT Virtual Texturing Shaders
//  Based on Sean Barrett's public domain "Sparse Virtual Textures" demo shaders
//  Copyright (c) 2010 A. Julian Mayer
//
   
    precision mediump float;

    const float phys_tex_dimension_pages = 32.000000;
    const float page_dimension = 256.000000;
    const float page_dimension_log2 = 8.000000;
    const float prepass_resolution_reduction_shift = 2.000000;
    const float virt_tex_dimension_pages = 32.000000;
    const float virt_tex_dimension = 8192.000000;
    const float border_width = 0.000000;
    const float max_anisotropy = 0.000000;

    #define USE_MIPCALC_TEXTURE 1
    #define PAGE_BORDER 0
    #define MIPPED_PHYSTEX 0
    #define FALLBACK_ENTRIES 1
    #define ANISOTROPY 0
    #define LONG_MIP_CHAIN 0
    #define TEXUNIT_MIPCALC TEXUNIT3
    #define TEXUNIT_PHYSICAL TEXUNIT2
    #define TEXUNIT_PAGETABLE TEXUNIT1


    //
    // vtReadbackFragGLSL
    //
    uniform sampler2D mipcalcTexture;
    uniform float mip_bias;
    varying vec2 texcoord;

    void main(void)
    {
        gl_FragColor = texture2D(mipcalcTexture, texcoord.xy, page_dimension_log2 - prepass_resolution_reduction_shift + mip_bias);
    }

VT shader id: 4 source:
   
//
//  LibVT Virtual Texturing Shaders
//  Based on Sean Barrett's public domain "Sparse Virtual Textures" demo shaders
//  Copyright (c) 2010 A. Julian Mayer
//
   
    precision mediump float;

    const float phys_tex_dimension_pages = 32.000000;
    const float page_dimension = 256.000000;
    const float page_dimension_log2 = 8.000000;
    const float prepass_resolution_reduction_shift = 2.000000;
    const float virt_tex_dimension_pages = 32.000000;
    const float virt_tex_dimension = 8192.000000;
    const float border_width = 0.000000;
    const float max_anisotropy = 0.000000;

    #define USE_MIPCALC_TEXTURE 1
    #define PAGE_BORDER 0
    #define MIPPED_PHYSTEX 0
    #define FALLBACK_ENTRIES 1
    #define ANISOTROPY 0
    #define LONG_MIP_CHAIN 0
    #define TEXUNIT_MIPCALC TEXUNIT3
    #define TEXUNIT_PHYSICAL TEXUNIT2
    #define TEXUNIT_PAGETABLE TEXUNIT1


    //
    // vtRenderVertGLSL
    //
    uniform mat4 matViewProjection;
    attribute vec4 vertex;
    attribute vec2 texcoord0;
    varying vec2 texcoord;

    void main( void )
    {
        gl_Position = matViewProjection * vertex;
        texcoord    = texcoord0.xy;
    } 

VT shader id: 5 source:
   
//
//  LibVT Virtual Texturing Shaders
//  Based on Sean Barrett's public domain "Sparse Virtual Textures" demo shaders
//  Copyright (c) 2010 A. Julian Mayer
//
   
    precision mediump float;

    const float phys_tex_dimension_pages = 32.000000;
    const float page_dimension = 256.000000;
    const float page_dimension_log2 = 8.000000;
    const float prepass_resolution_reduction_shift = 2.000000;
    const float virt_tex_dimension_pages = 32.000000;
    const float virt_tex_dimension = 8192.000000;
    const float border_width = 0.000000;
    const float max_anisotropy = 0.000000;

    #define USE_MIPCALC_TEXTURE 1
    #define PAGE_BORDER 0
    #define MIPPED_PHYSTEX 0
    #define FALLBACK_ENTRIES 1
    #define ANISOTROPY 0
    #define LONG_MIP_CHAIN 0
    #define TEXUNIT_MIPCALC TEXUNIT3
    #define TEXUNIT_PHYSICAL TEXUNIT2
    #define TEXUNIT_PAGETABLE TEXUNIT1


    //
    // vtRenderFragGLSL
    //
    uniform sampler2D pageTableTexture;
    uniform sampler2D physicalTexture;
    uniform float mip_bias;
    varying vec2 texcoord;

    // FALLBACK_ENTRIES
    vec2 calculateCoordinatesFromSample(vec4 pageTableEntry)
    {
        #if LONG_MIP_CHAIN
            float mipExp = exp2(pageTableEntry.a);
        #else
            float mipExp = pageTableEntry.a + 1.0;
        #endif

        vec2 pageCoord = pageTableEntry.bg;
        vec2 withinPageCoord = fract(texcoord.xy * mipExp);

        #if PAGE_BORDER
            withinPageCoord = withinPageCoord * (page_dimension - border_width * 2.0)/page_dimension + border_width/page_dimension;
        #endif

        vec2 result = ((pageCoord + withinPageCoord) / phys_tex_dimension_pages);
        return result;
    }

    vec2 calculateVirtualTextureCoordinates()
    {
        vec4 pageTableEntry = texture2D(pageTableTexture, texcoord.xy, page_dimension_log2 + mip_bias) * 255.0; // samplePagetableOnce
        return calculateCoordinatesFromSample(pageTableEntry);
    }

    void main(void)
    {
        vec2 coord = calculateVirtualTextureCoordinates();
        vec4 vtex = texture2D(physicalTexture, coord);
        gl_FragColor = vtex;
    }

INFO: vertex_shader id 7 build OK
INFO: fragment_shader id 8 build OK
INFO: texmap.png (512x512, 24 bits) load OK
INFO: updated aspect to 1.333333
INFO: GL viewport resize = 800x600
Requesting page: Mip:5 0/0
Loading page from RAM-cache: Mip:5 0/0 (5)
Loading page to VRAM: Mip:5 0/0 to 0/0
